Caffe 多GPU模式
在train.sh 中添加-- gpu all
同时需要修改batch_size才能与单GPU模式对等，如原batch_size为64，使用2个GPU时，需将batch_size修改为32。

深度学习服务器安装教程 
1.ubuntu14.04系统安装，将所有安装文件都存放在home/master下面
2.登陆root模式（无法进入图形化界面，Ctrl+Alt+F1） 
  1.nano /etc/default/grub 
  2.修改GRUB_CMDLINE_LINUX_DEFAULT=“quiet splash nomodeset” 
  3.update-grub 
  4.reboot 
3.显卡驱动安装 
  1.Ctrl+Alt+F1 
  2.登陆root模式 
  3.service lightdm stop 
  4.chmod 755 NVIDIA-Linux-x86_64-367.27.run 
  5.   ./NVIDIA-Linux-x86_64-367.27.run (accept,Continue installation) 
  6.service lightdm start 
  7.reboot 
4.cuda安装 
  NVIDIA-Linux-x86_64-367.27.run 对应cuda_8.0.27_linux.run 
  NVIDIA-Linux-x86_64-367.44.run 对应cuda_8.0.44_linux.run(注意版本兼容性)
  1.add-apt-repository ppa:graphics-drivers/ppa
  2.apt-get update
  3.apt-get install nvidia-367
  4.apt-get install mesa-common-dev
  5.apt-get install freeglut3-dev(这5行代码可以避免开机黑屏)
  6.Ctrl+Alt+F1（登录root模式）
  7.sudo init 3  
  8.sh /home/master/cuda_8.0.27_linux.run 
  9.accept 
  10.n 
  11.y enter 
  12.y 
  13.y(安装完成，显示缺少依赖库) 
  14.apt-get install aptitude 
  15.aptitude install qt-sdk(用aptitude安装qt-sdk，安装依赖库所需依赖) 
  16.apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev（安装依赖库）
  17.reboot 
5.开机出现登录任然处在开机界面问题
  1.CTRL+ALT+F1（登录root模式）
  2.apt-get install nvidia-367 --reinstall
  3.reboot

6.环境变量配置 
  1.export PATH=/usr/local/cuda-8.0/bin:$PATH 
  2.export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH 
  3.nano /etc/profile（最后行加上上面两行export） 
  4.ldconfig 
  5.cd ~ 
  6.nvidia-smi 
  7.nvcc –V（显示安装信息） 
7.测试cuda的samples 
  1.cd /home/master/NVIDIA_CUDA-8.0_Samples 
  2.make 
  3.cd 1_Utilities/deviceQuery 
  4.   ./deviceQuery 
8.安装cudann 
  1.解压cudnn-8.0-linux-x64-v5.0-ga.tgz (建议升级为cudnn-8.0-linux-x64-v5.1-ga.tgz)
  2.cp cuda/include/cudnn.h /usr/local/cuda/include/   
  3.cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/   
  4.chmod a+r /usr/local/cuda/include/cudnn.h   
  5.chmod a+r /usr/local/cuda/lib64/libcudnn* 
  6.cd /home/master/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery 
  7.   ./deviceQuery(出现pass则安装完成) 
9.安装matlab2014b（还需用2014b_linux_crk.tar.gz文件） 
  1.apt-get install zip 
  2.apt-get install unzip 
  3.将matlab压缩文件中任意一个解压,获得完整iso文件 
  4.mkdir home/master/matlab 
  5.mount -o loop [path][filename].iso home/master/matlab 
  6.cd home/master/matlab 
  7.  ./install 
  8.安装路径为/usr/local/MATLAB/2014b（不使用Internet安装） 
  9.序列号为18121-53267-24795-29293-33561-00091-20592 
  10.勾选从默认启动路径创建符号链接 
  11.将2014b_linux_crk.tar.gz中的license_405317_R2014b.lic移到/usr/local/MATLAB/license 
  12.将2014b_linux_crk.tar.gz中的libmwservices.so移动到/usr/local/MATLAB/bin/glnxa64/ 
  13.输入matlab即可打开软件 
10.opencv3.0.0配置 
  1.下载opencv3.0.0.zip和ippicv_linux_20141027.tgz 
  2.将opencv3.0.0.zip解压 
  3.mkdir build 
  4.cd build 
  5.cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..  (会卡在下载ippicv_linux_20141027.tgz处) 
  6.将ippicv_linux_20141027.tgz解压后替换到opencv-3.0.0/3rdparty/ippicv/  downloads/linux-8b449a....文件夹下 
  7.cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..  
  8.make 
  9. make install
11.安装 parallel_studio_xe_2016
  1.chmod a+x parallel_studio_xe_2016  -R
  2.sh parallel_studio_xe_2016/install_GUI.sh
  安装秘钥为2hws-tbhc4x3d
  3.gedit /etc/ld.so.conf.d/intel_mkl.conf
  添加/opt/intel/lib/intel64
  /opt/intel/mkl/lib/intel64
  4.ldconfig  -v
12.安装glog-0.3.3
  1.chmod  777  glog-0.3.3  –R
  2.cd  glog-0.3.3  –R
  3.  ./configure
  4.make
  5.make install
  6.安装依赖项
   apt-get install -y libprotobuf-dev  libleveldb-dev  libsnappy-dev  libopencv-dev  libboost-all-dev libhdf5-serial-dev libgflags-dev libgoogle-glog-dev liblmdb-dev  protobuf-compiler  protobuf-c-compiler protobuf-compiler
13.安装caffe并测试
  1.安装依赖项 
  apt-get install -y python-numpy  python-scipy  python-matplotlib  python-sklearn  python-skimage  python-h5py  python-protobuf  python-leveldb  python-networkx  python-nose  python-pandas  python-gflags  Cython  ipython
  2.cp include/cudnn.h /usr/local/include
  3.cp lib64/libcudnn.* /usr/local/lib
  4.ln -sf /usr/local/lib/libcudnn.so.7.0.64 /usr/local/lib/libcudnn.so.7.0
  5.ln -sf /usr/local/lib/libcudnn.so.7.0 /usr/local/lib/libcudnn.so
  6.ldconfig  -v
  7.$ cp Makefile.config.example  Makefile.config 
  8.配置Makefile.config 
   USE_CUDNN :=1前的注释去掉，启动cudnn（CPU_ONLY := 1 如无GPU，启用CPU，则去掉"#"）
   配置一些引用文件（增加部分主要是解决新版本下，HDF5的路径问题）
   INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include  /usr/lib/x86_64-linux-gnu/hdf5/serial/include
   LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib  /usr/lib  /usr/lib/x86_64-linux-gnu/hdf5/serial
   BLAS := mkl，启用Intel Parallel Studio XE 2016
   PYTHON_LIB := /usr/local/lib， 配置路径，实现caffe对Python接口的支持
   MATLAB_DIR := /usr/local/MATLAB/R2014b，配置路径，实现caffe对MATLAB接口的支持
   OPENCV_VERSION =3，启用OpenCV 3.0, 去掉"#"
  9.编译caffe-master
   make all -j
   make test -j 
   make runtest -j
  10.如在runtest出错，错误为/sbin/ldconfig.real: /usr/local/lib/libcudnn.so.5 is not a symbolic link
cd  /usrlocal/lib
mv libcudnn.so.5 libcudnn.so.5.bak 

  编译Python和Matlab用到的caffe文件
  make pycaffe -j
  make matcaffe -j
14.使用MNIST数据集进行测试
  1.sh data/mnist/get_mnist.sh
  2.sh examples/mnist/create_mnist.sh
  3.sh examples/mnist/train_lenet.sh
  没有GPU的话要记得把caffe/examples/mnist/lenet_solver.prototxt中的solver_mode设置成solver_mode: CPU。
